import Build_gradle.Category.Icon
import Build_gradle.Category.Symbol

plugins {
    kotlin("multiplatform")
    id("org.jetbrains.compose")
    id("com.varabyte.kobweb.internal.publish")
}

group = "com.varabyte.kobweb"
version = libs.versions.kobweb.libs.get()

kotlin {
    js(IR) {
        browser()
        binaries.executable()
    }
    sourceSets {
        val jsMain by getting {
            dependencies {
                implementation(compose.web.core)
                implementation(compose.runtime)

                api(project(":frontend:kobweb-compose"))
            }
        }
    }
}

kobwebPublication {
    artifactId.set("kobweb-silk-icons-mdi")
    description.set("A collection of Kobweb Silk components that directly wrap Material Design icons")
}

sealed class Category {
    object Symbol : Category()

    sealed class Icon : Category() {
        object Default : Icon()
        object Outlined : Icon()
        object Rounded : Icon()
        object Sharp : Icon()
        object TwoToned : Icon()
    }
}

val regenerateIconsTask = tasks.register("regenerateIcons") {
    val srcFile = layout.projectDirectory.file("md-icon-list.txt")
    val dstFile =
        layout.projectDirectory.file("src/jsMain/kotlin/com/varabyte/kobweb/silk/components/icons/mdi/MdIcons.kt")

    inputs.files(srcFile, layout.projectDirectory.file("build.gradle.kts"))
    outputs.file(dstFile)

    // {SOLID=[ad, address-book, address-card, ...], REGULAR=[address-book, address-card, angry, ...], ... }
    val iconRawNames = srcFile.asFile
        .readLines().asSequence()
        .filter { line -> !line.startsWith("#") }
        .map { line ->
            line.split("=", limit = 2).let { parts ->
                val category = when (parts.first())  {
                    "mds" -> Symbol
                    "mdi" -> Icon.Default
                    "mdio" -> Icon.Outlined
                    "mdir" -> Icon.Rounded
                    "mdis" -> Icon.Sharp
                    "mdit" -> Icon.TwoToned
                    else -> throw GradleException("Unexpected category string: ${parts[0]}")
                }
                val names = parts[1]

                category to names.split(",")
            }
        }
        .toMap()

    // For each icon name, figure out what categories they are in. This will affect the function signature we generate.
    // {ad=[SOLID], address-book=[SOLID, REGULAR], address-card=[SOLID, REGULAR], ...
    val iconCategories = mutableMapOf<String, MutableSet<Category>>()
    iconRawNames.forEach { entry ->
        val category = entry.key
        entry.value.forEach { rawName ->
            iconCategories.computeIfAbsent(rawName) { mutableSetOf() }.add(category)
        }
    }

    val iconMethodEntries = iconCategories
        .map { entry ->
            // TODO: Figure out how to get ligatures to work
            val (rawName, ligature) = entry.key.split(" ", limit = 2)
            val methodName = rawName.split("_").joinToString("") { it.capitalize() }
            val categories = entry.value

            when {
                categories.contains(Symbol) -> {}
                else -> "@Composable fun Mdi$methodName(modifier: Modifier = Modifier, status: IconStatus = IconStatus.ACTIVE, mode: IconMode = IconMode.LIGHT, style: IconCategory = IconCategory.Default) = MdiIcon(\"$rawName\", modifier, status, mode, style)"
            }
        }

    val iconsCode = """
@file:Suppress("unused", "SpellCheckingInspection")

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// THIS FILE IS AUTOGENERATED.
//
// Do not edit this file by hand. Instead, update `md-icon-list.txt` in the module root and run the Gradle
// task "regenerateIcons"
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

package com.varabyte.kobweb.silk.components.icons.mdi

import androidx.compose.runtime.*
import com.varabyte.kobweb.compose.ui.Modifier
import com.varabyte.kobweb.compose.ui.asAttributesBuilder
import com.varabyte.kobweb.compose.ui.attrsModifier
import com.varabyte.kobweb.compose.ui.toAttrs
import com.varabyte.kobweb.silk.components.icons.mdi.MdCategory.Icon
import com.varabyte.kobweb.silk.components.icons.mdi.MdCategory.Icon.*
import com.varabyte.kobweb.silk.components.icons.mdi.MdCategory.Symbol
import com.varabyte.kobweb.silk.components.icons.mdi.MdCategory.Symbol.Outlined
import org.jetbrains.compose.web.dom.Span
import org.jetbrains.compose.web.dom.Text

sealed class MdCategory {
    sealed class Symbol : MdCategory() {
        object Outlined : Symbol()
        object Rounded : Symbol()
        object Sharp : Symbol()
    }

    sealed class Icon : MdCategory() {
        object Default : Icon()
        object Outlined : Icon()
        object Rounded : Icon()
        object Sharp : Icon()
        object TwoToned : Icon()

        sealed class Status(internal val className: String?) {
            object ACTIVE : Status(null)
            object DISABLED : Status("md-inactive")
        }
        sealed class Mode(internal val className: String?) {
            object DEFAULT : Mode(null)
            object LIGHT : Mode("md-dark")
            object DARK : Mode("md-light")
        }
    }
}

fun Modifier.status(status: Status) = attrsModifier {
    status.className?.let { classes(it) }
}

fun Modifier.mode(mode: Mode) = attrsModifier {
    mode.className?.let { classes(it) }
}

fun Modifier.size(size: Int) = attrsModifier {
    classes("md-${'$'}size")
}

// TODO: None of these will work currently. Need to figure out how to get `font-variation-settings` building working 
//  correctly. This will probably change to a different method of setting these a la builder?
fun Modifier.wght(weight: Int) = attrsModifier {
    weight.coerceIn(100..700).toString().let {
        attr("wght", it)
    }
}

fun Modifier.FILL(fill: Float) = attrsModifier {
    fill.coerceIn(0F..1F).toString().let {
        attr("FILL", it)
    }
}

fun Modifier.GRAD(grad: Int) = attrsModifier {
    grad.coerceIn(-25..200).toString().let {
        attr("GRAD", it)
    }
}

fun Modifier.opsz(opsz: Int) = attrsModifier {
    opsz.coerceIn(20..48).toString().let {
        attr("opsz", it)
    }
}

@Composable
fun MdIcon(
    name: String,
    modifier: Modifier,
    style: Icon = Default,
) {
    Span(
        attrs = modifier.toAttrs { classes("material-icons${'$'}{style.className}") }
    ) {
        Text(name)
    }
}

@Composable
fun MdSymbol(
    name: String,
    modifier: Modifier,
    style: Symbol = Outlined,
) {
    Span(
        attrs = modifier.toAttrs {
            classes("material-symbols-${'$'}{style.className}")
        }
    ) {
        Text(name)
    }
}

${iconMethodEntries.joinToString("\n")}
    """.trimIndent()

    println(dstFile.asFile.writeText(iconsCode))
}

tasks.named("compileKotlinJs") {
    dependsOn(regenerateIconsTask)
}

tasks.named("sourcesJar") {
    dependsOn(regenerateIconsTask)
}

tasks.named("jsSourcesJar") {
    dependsOn(regenerateIconsTask)
}