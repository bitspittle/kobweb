import Build_gradle.IconCategory.*

plugins {
    kotlin("multiplatform")
    id("org.jetbrains.compose")
    id("com.varabyte.kobweb.internal.publish")
}

group = "com.varabyte.kobweb"
version = libs.versions.kobweb.libs.get()

kotlin {
    js(IR) {
        browser()
        binaries.executable()
    }
    sourceSets {
        val jsMain by getting {
            dependencies {
                implementation(compose.web.core)
                implementation(compose.runtime)

                api(project(":frontend:kobweb-compose"))
            }
        }
    }
}

kobwebPublication {
    artifactId.set("kobweb-silk-icons-mdi")
    description.set("A collection of Kobweb Silk components that directly wrap Material Design icons")
}

enum class IconCategory {
    DEFAULT,
    OUTLINED,
    ROUNDED,
    SHARP,
    TWO_TONED;
}

fun IconCategory.toFunctionSuffix(): String {
    return when (this) {
        OUTLINED -> "Outlined"
        ROUNDED -> "Rounded"
        SHARP -> "Sharp"
        TWO_TONED -> "TwoToned"
        else -> ""
    }
}

val regenerateIconsTask = tasks.register("regenerateIcons") {
    val srcFile = layout.projectDirectory.file("md-icon-list.txt")
    val dstFile =
        layout.projectDirectory.file("src/jsMain/kotlin/com/varabyte/kobweb/silk/components/icons/mdi/MdIcons.kt")

    inputs.files(srcFile, layout.projectDirectory.file("build.gradle.kts"))
    outputs.file(dstFile)

    val iconRawNames = srcFile.asFile
        .readLines()
        .asSequence()
        .filter { line -> !line.startsWith("#") }
        .map { line ->
            // Convert icon name to function name, e.g.
            // align-left -> FaAlignLeft
            line.split("=", limit = 2).let { parts ->
                val category = when (parts[0]) {
                    "mdi" -> DEFAULT
                    "mdio" -> OUTLINED
                    "mdir" -> ROUNDED
                    "mdis" -> SHARP
                    "mdit" -> TWO_TONED
                    else -> throw GradleException("Unexpected category string: ${parts[0]}")
                }
                val names = parts[1]

                category to names.split(",")
            }
        }
        .toMap()

    // For each icon name, figure out what categories they are in. This will affect the function signature we generate.
    val iconCategories = mutableMapOf<String, MutableSet<IconCategory>>()
    iconRawNames.forEach { entry ->
        val category = entry.key
        entry.value.forEach { rawName ->
            iconCategories.computeIfAbsent(rawName) { mutableSetOf() }.add(category)
        }
    }

    val iconMethodEntries = iconCategories
        .map { entry ->
            // TODO: Figure out how to get ligatures to work
            val (rawName, ligature) = entry.key.split(" ", limit = 2)
            val methodName = rawName.split("_").joinToString("") { it.capitalize() }
            val categories = entry.value

            when {
                // If the icon is in all categories, we can just use the default function signature
                categories.size == IconCategory.values().size -> {
                    "@Composable fun Mdi$methodName(modifier: Modifier = Modifier, style: IconStyle = DEFAULT) = MdIcon(\"$rawName\", modifier, style)"
                }
                // Otherwise, we need to generate a function for each category
                categories.size >= 1 -> {
                    categories.joinToString("\n") { category ->
                        "@Composable fun Mdi$methodName${category.toFunctionSuffix()}(modifier: Modifier = Modifier) = MdIcon(\"$rawName\", modifier, ${category.name})"
                    }
                }
                // If we get here, something went wrong
                else -> GradleException("Unhandled icon entry: $entry")
            }
        }

    val iconsCode = """
@file:Suppress("unused", "SpellCheckingInspection")

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// THIS FILE IS AUTOGENERATED.
//
// Do not edit this file by hand. Instead, update `md-icon-list.txt` in the module root and run the Gradle
// task "regenerateIcons"
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

package com.varabyte.kobweb.silk.components.icons.mdi

import androidx.compose.runtime.*
import com.varabyte.kobweb.compose.ui.Modifier
import com.varabyte.kobweb.compose.ui.attrsModifier
import com.varabyte.kobweb.compose.ui.toAttrs
import com.varabyte.kobweb.silk.components.icons.mdi.IconMode.DARK
import com.varabyte.kobweb.silk.components.icons.mdi.IconMode.LIGHT
import com.varabyte.kobweb.silk.components.icons.mdi.IconStatus.*
import com.varabyte.kobweb.silk.components.icons.mdi.IconStyle.*
import org.jetbrains.compose.web.dom.Span
import org.jetbrains.compose.web.dom.Text

enum class IconStyle {
    DEFAULT,
    OUTLINED,
    ROUNDED,
    SHARP,
    TWO_TONED;
}

private fun IconStyle.toClassNameSuffix(): String {
    return when (this) {
        OUTLINED -> "-outlined"
        ROUNDED -> "-round"
        SHARP -> "-sharp"
        TWO_TONED -> "-two-tone"
        else -> ""
    }
}

enum class IconStatus {
    ACTIVE,
    DISABLED;
}

private fun IconStatus.toClassNameSuffix(): String {
    return when (this) {
        DISABLED -> "md-inactive"
        else -> ""
    }
}

enum class IconMode {
    DEFAULT,
    LIGHT,
    DARK;
}

private fun IconMode.toClassNameSuffix(): String {
    return when (this) {
        LIGHT -> "md-dark"
        DARK -> "md-light"
        else -> ""
    }
}

fun Modifier.status(status: IconStatus) = attrsModifier {
    classes(status.toClassNameSuffix())
}

fun Modifier.mode(mode: IconMode) = attrsModifier {
    classes(mode.toClassNameSuffix())
}

fun Modifier.size(size: Int) = attrsModifier {
    classes("md-${"$"}size")
}

@Composable
fun MdIcon(
    name: String,
    modifier: Modifier,
    style: IconStyle = DEFAULT,
) {
    Span(
        attrs = modifier.toAttrs { classes("material-icons${"$"}{style.toClassNameSuffix()}") }
    ) {
        Text(name)
    }
}

${iconMethodEntries.joinToString("\n")}
    """.trimIndent()

    println(dstFile.asFile.writeText(iconsCode))
}

tasks.named("compileKotlinJs") {
    dependsOn(regenerateIconsTask)
}

tasks.named("sourcesJar") {
    dependsOn(regenerateIconsTask)
}

tasks.named("jsSourcesJar") {
    dependsOn(regenerateIconsTask)
}