@file:Suppress("unused", "SpellCheckingInspection")

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// THIS FILE IS AUTOGENERATED.
//
// Do not edit this file by hand. Instead, update `md-icon-list.txt` in the module root and run the Gradle
// task "regenerateIcons"
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

package com.varabyte.kobweb.silk.components.icons.mdi

import androidx.compose.runtime.*
import com.varabyte.kobweb.compose.ui.Modifier
import com.varabyte.kobweb.compose.ui.attrsModifier
import com.varabyte.kobweb.compose.ui.toAttrs
import com.varabyte.kobweb.silk.components.icons.mdi.MdStyle.IconStyle
import com.varabyte.kobweb.silk.components.icons.mdi.MdStyle.IconStyle.*
import com.varabyte.kobweb.silk.components.icons.mdi.MdStyle.SymbolStyle
import com.varabyte.kobweb.silk.components.icons.mdi.MdStyle.SymbolStyle.Outlined
import org.jetbrains.compose.web.dom.Span
import org.jetbrains.compose.web.dom.Text

sealed class MdStyle {
    sealed class SymbolStyle(internal val className: String) : MdStyle() {
        object Outlined : SymbolStyle("outlined")
        object Rounded : SymbolStyle("rounded")
        object Sharp : SymbolStyle("sharp")
    }

    sealed class IconStyle(internal val className: String?) : MdStyle() {
        object Default : IconStyle(null)
        object Outlined : IconStyle("-outlined")
        object Rounded : IconStyle("-rounded")
        object Sharp : IconStyle("-sharp")
        object TwoToned : IconStyle("two-toned")

        sealed class Status(internal val className: String?) {
            object ACTIVE : Status(null)
            object DISABLED : Status("md-inactive")
        }
        sealed class Mode(internal val className: String?) {
            object DEFAULT : Mode(null)
            object LIGHT : Mode("md-dark")
            object DARK : Mode("md-light")
        }
    }
}

fun Modifier.status(status: Status) = attrsModifier {
    status.className?.let { classes(it) }
}

fun Modifier.mode(mode: Mode) = attrsModifier {
    mode.className?.let { classes(it) }
}

fun Modifier.size(size: Int) = attrsModifier {
    classes("md-$size")
}

// TODO: None of these will work currently. Need to figure out how to get `font-variation-settings` building working 
//  correctly. This will probably change to a different method of setting these a la builder?
fun Modifier.wght(weight: Int) = attrsModifier {
    weight.coerceIn(100..700).toString().let {
        attr("wght", it)
    }
}

fun Modifier.FILL(fill: Float) = attrsModifier {
    fill.coerceIn(0F..1F).toString().let {
        attr("FILL", it)
    }
}

fun Modifier.GRAD(grad: Int) = attrsModifier {
    grad.coerceIn(-25..200).toString().let {
        attr("GRAD", it)
    }
}

fun Modifier.opsz(opsz: Int) = attrsModifier {
    opsz.coerceIn(20..48).toString().let {
        attr("opsz", it)
    }
}

@Composable
fun MdIcon(
    name: String,
    modifier: Modifier,
    style: IconStyle = Default,
) {
    Span(
        attrs = modifier.toAttrs { classes("material-icons${style.className.orEmpty()}") }
    ) {
        Text(name)
    }
}

@Composable
fun MdSymbol(
    name: String,
    modifier: Modifier,
    style: SymbolStyle = Outlined,
) {
    Span(
        attrs = modifier.toAttrs {
            classes("material-symbols-${style.className}")
        }
    ) {
        Text(name)
    }
}

@Composable fun Mdi10k(modifier: Modifier = Modifier, style: IconStyle = Default) = MdIcon("10k", modifier, style)
@Composable fun Mdi10mp(modifier: Modifier = Modifier, style: IconStyle = Default) = MdIcon("10mp", modifier, style)